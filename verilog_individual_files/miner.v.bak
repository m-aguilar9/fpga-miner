`include "global_defines.v"
module miner(
    input clk,
    input reset, // Added reset signal
    input [607:0] header,
    input [255:0] target,
    output reg [31:0] nonce
);

    parameter INONCE = 0; // for testing

    reg [31:0] nonce_in;
    reg [31:0] nonce_out;
    initial nonce_in = INONCE;
    initial nonce_out = INONCE;

    reg [6:0] counter;
    reg advance;
    initial counter = `THROUGHPUT-1;
    initial advance = 0;

    wire res;
    wire has_res;

    odo_keccak worker(clk, {nonce_in, header}, advance, target, res, has_res);

    always @(posedge clk or posedge reset)
    begin
        if (reset) begin
            nonce_in <= INONCE;
            nonce_out <= INONCE;
            counter <= `THROUGHPUT-1;
            advance = 0;
            nonce <= 0;
        end else begin
            if (counter == `THROUGHPUT-1) begin
                counter <= 0;
                advance <= 1;
            end else begin
                counter <= counter + 1;
                advance <= 0;
            end
            if (advance)
                nonce_in <= nonce_in + 1;
            else if (has_res) begin
                if (res)
                    nonce <= nonce_out;
                nonce_out <= nonce_out + 1;
            end
        end
    end
endmodule
