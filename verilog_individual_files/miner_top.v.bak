module miner_top(
    input osc_clk,
    input reset, // Added reset signal
    output [31:0] nonce,
    output [43:0] padded_nonce
);

    wire [607:0] header;
    wire [255:0] target;
    wire miner_clk;
    wire [31:0] seed = 32'hA5A5A5A5;

    // Clock divider instance
    clock_divider clk_div (
        .clk_in(osc_clk),
        .reset(reset), // Pass reset signal
        .clk_out(miner_clk)
    );

    // Assigning header and target values
    assign header = 608'h0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef;
    assign target = 256'h0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef;

    // Miner instance
    miner miner_instance(
        .clk(miner_clk),
        .reset(reset), // Pass reset signal
        .header(header),
        .target(target,
        .nonce(nonce)
    );

    // Pad nonce instance
    pad_nonce pad_nonce_instance(
        .clk(miner_clk),
        .reset(reset), // Pass reset signal
        .in(nonce),
        .out(padded_nonce)
    );

endmodule

